// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	fiaasschibstediov1 "github.com/fiaas/fiaas-go-client/pkg/apis/fiaas.schibsted.io/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeApplicationStatuses implements ApplicationStatusInterface
type FakeApplicationStatuses struct {
	Fake *FakeFiaasV1
	ns   string
}

var applicationstatusesResource = schema.GroupVersionResource{Group: "fiaas.schibsted.io", Version: "v1", Resource: "applicationstatuses"}

var applicationstatusesKind = schema.GroupVersionKind{Group: "fiaas.schibsted.io", Version: "v1", Kind: "ApplicationStatus"}

// Get takes name of the applicationStatus, and returns the corresponding applicationStatus object, and an error if there is any.
func (c *FakeApplicationStatuses) Get(name string, options v1.GetOptions) (result *fiaasschibstediov1.ApplicationStatus, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(applicationstatusesResource, c.ns, name), &fiaasschibstediov1.ApplicationStatus{})

	if obj == nil {
		return nil, err
	}
	return obj.(*fiaasschibstediov1.ApplicationStatus), err
}

// List takes label and field selectors, and returns the list of ApplicationStatuses that match those selectors.
func (c *FakeApplicationStatuses) List(opts v1.ListOptions) (result *fiaasschibstediov1.ApplicationStatusList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(applicationstatusesResource, applicationstatusesKind, c.ns, opts), &fiaasschibstediov1.ApplicationStatusList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &fiaasschibstediov1.ApplicationStatusList{ListMeta: obj.(*fiaasschibstediov1.ApplicationStatusList).ListMeta}
	for _, item := range obj.(*fiaasschibstediov1.ApplicationStatusList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested applicationStatuses.
func (c *FakeApplicationStatuses) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(applicationstatusesResource, c.ns, opts))

}

// Create takes the representation of a applicationStatus and creates it.  Returns the server's representation of the applicationStatus, and an error, if there is any.
func (c *FakeApplicationStatuses) Create(applicationStatus *fiaasschibstediov1.ApplicationStatus) (result *fiaasschibstediov1.ApplicationStatus, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(applicationstatusesResource, c.ns, applicationStatus), &fiaasschibstediov1.ApplicationStatus{})

	if obj == nil {
		return nil, err
	}
	return obj.(*fiaasschibstediov1.ApplicationStatus), err
}

// Update takes the representation of a applicationStatus and updates it. Returns the server's representation of the applicationStatus, and an error, if there is any.
func (c *FakeApplicationStatuses) Update(applicationStatus *fiaasschibstediov1.ApplicationStatus) (result *fiaasschibstediov1.ApplicationStatus, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(applicationstatusesResource, c.ns, applicationStatus), &fiaasschibstediov1.ApplicationStatus{})

	if obj == nil {
		return nil, err
	}
	return obj.(*fiaasschibstediov1.ApplicationStatus), err
}

// Delete takes name of the applicationStatus and deletes it. Returns an error if one occurs.
func (c *FakeApplicationStatuses) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(applicationstatusesResource, c.ns, name), &fiaasschibstediov1.ApplicationStatus{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeApplicationStatuses) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(applicationstatusesResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &fiaasschibstediov1.ApplicationStatusList{})
	return err
}

// Patch applies the patch and returns the patched applicationStatus.
func (c *FakeApplicationStatuses) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *fiaasschibstediov1.ApplicationStatus, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(applicationstatusesResource, c.ns, name, pt, data, subresources...), &fiaasschibstediov1.ApplicationStatus{})

	if obj == nil {
		return nil, err
	}
	return obj.(*fiaasschibstediov1.ApplicationStatus), err
}
